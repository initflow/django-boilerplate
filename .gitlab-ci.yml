# Сообщаем Gitlab CI, что мы будем использовать Docker при сборке.
image: docker:latest
services:
    - docker:dind

stages:
    - build
    - deploy

before_script:
    # установка pip
    - apk add --no-cache py-pip
    # установка docker-compose
    - pip install docker-compose==1.9.0
    - apk add --update nodejs nodejs-npm
    # логин в Gitlab Docker registry
    - docker login -u gitlab-ci-token -p $CI_BUILD_TOKEN $CI_REGISTRY

#Сборка Docker-образа
build_master:
    stage: build
    only:
        - master
    script:

        - docker build -t $CI_REGISTRY_REPOSITORY/nginx ./nginx
        - docker push $CI_REGISTRY_REPOSITORY/nginx

        - docker build -t $CI_REGISTRY_REPOSITORY/web ./web
        - docker push $CI_REGISTRY_REPOSITORY/web


#Сборка Docker-образа
build_stage:
    stage: build
    only:
        - stage
    script:
        - docker build -t $CI_REGISTRY_REPOSITORY/stage/nginx ./nginx
        - docker push $CI_REGISTRY_REPOSITORY/stage/nginx

        - docker build -t $CI_REGISTRY_REPOSITORY/stage/web ./web
        - docker push $CI_REGISTRY_REPOSITORY/stage/web



# Выкат на сервер
deploy:
    stage: deploy
    only:
        - master
    before_script:
        # устанавливаем зависимости Fabric, bash и rsync
        - apk add --no-cache openssh openssh-client py-pip py-crypto bash rsync
        # устанавливаем Fabric
        - pip install fabric==1.12.0
        # добавляем приватный ключ для выката
        - eval $(ssh-agent -s)

        - bash -c 'ssh-add <(echo "$SSH_PRIVATE_KEY" | base64 -d)'
        - mkdir -p ~/.ssh
        - echo -e "Host *\n\tStrictHostKeyChecking no\n\n" > ~/.ssh/config
    script:
        - fab -H $DEPLOY_ADDR deploy
    when: manual